	M(:, 1, 1) = [0, 0, c1_2_2*c2_1_2 - c3_3_1 - c1_1_2*c3_1_2 + c3_1_2*(c1_1_2 - c3_2_2), c1_2_2*c2_1_3 - c3_3_2 + c1_2_3*c2_1_2 - c1_1_2*c3_1_3 - c1_1_3*c3_1_2 + c3_1_3*(c1_1_2 - c3_2_2) + c3_1_2*(c1_1_3 - c3_2_3), c1_2_3*c2_1_3 - c3_3_3 - c1_1_3*c3_1_3 + c3_1_3*(c1_1_3 - c3_2_3)]; % degree = 2
	M(:, 1, 2) = [0, 0, c1_3_1 + c1_2_2*c2_2_2 - c1_2_2*c3_1_2 + c3_2_2*(c1_1_2 - c3_2_2), c1_3_2 + c1_2_2*c2_2_3 + c1_2_3*c2_2_2 - c1_2_2*c3_1_3 - c1_2_3*c3_1_2 + c3_2_3*(c1_1_2 - c3_2_2) + c3_2_2*(c1_1_3 - c3_2_3), c1_3_3 + c1_2_3*c2_2_3 - c1_2_3*c3_1_3 + c3_2_3*(c1_1_3 - c3_2_3)]; % degree = 2
	M(:, 1, 3) = [0, c1_2_2*c2_3_1 - c1_3_1*c3_1_2 + c3_3_1*(c1_1_2 - c3_2_2), c1_2_2*c2_3_2 + c1_2_3*c2_3_1 - c1_3_1*c3_1_3 - c1_3_2*c3_1_2 + c3_3_2*(c1_1_2 - c3_2_2) + c3_3_1*(c1_1_3 - c3_2_3), c1_2_2*c2_3_3 + c1_2_3*c2_3_2 - c1_3_2*c3_1_3 - c1_3_3*c3_1_2 + c3_3_3*(c1_1_2 - c3_2_2) + c3_3_2*(c1_1_3 - c3_2_3), c1_2_3*c2_3_3 - c1_3_3*c3_1_3 + c3_3_3*(c1_1_3 - c3_2_3)]; % degree = 3
	M(:, 2, 1) = [0, 0, c2_1_2*c3_2_2 - c1_1_2*c2_1_2 - c2_3_1 - c3_1_2*(c2_2_2 - c3_1_2), c2_1_2*c3_2_3 - c1_1_2*c2_1_3 - c1_1_3*c2_1_2 - c2_3_2 + c2_1_3*c3_2_2 - c3_1_3*(c2_2_2 - c3_1_2) - c3_1_2*(c2_2_3 - c3_1_3), c2_1_3*c3_2_3 - c1_1_3*c2_1_3 - c2_3_3 - c3_1_3*(c2_2_3 - c3_1_3)]; % degree = 2
	M(:, 2, 2) = [0, 0, c3_3_1 - c1_2_2*c2_1_2 + c2_2_2*c3_2_2 - c3_2_2*(c2_2_2 - c3_1_2), c3_3_2 - c1_2_2*c2_1_3 - c1_2_3*c2_1_2 + c2_2_2*c3_2_3 + c2_2_3*c3_2_2 - c3_2_3*(c2_2_2 - c3_1_2) - c3_2_2*(c2_2_3 - c3_1_3), c3_3_3 - c1_2_3*c2_1_3 + c2_2_3*c3_2_3 - c3_2_3*(c2_2_3 - c3_1_3)]; % degree = 2
	M(:, 2, 3) = [0, c2_3_1*c3_2_2 - c1_3_1*c2_1_2 - c3_3_1*(c2_2_2 - c3_1_2), c2_3_1*c3_2_3 - c1_3_2*c2_1_2 - c1_3_1*c2_1_3 + c2_3_2*c3_2_2 - c3_3_2*(c2_2_2 - c3_1_2) - c3_3_1*(c2_2_3 - c3_1_3), c2_3_2*c3_2_3 - c1_3_3*c2_1_2 - c1_3_2*c2_1_3 + c2_3_3*c3_2_2 - c3_3_3*(c2_2_2 - c3_1_2) - c3_3_2*(c2_2_3 - c3_1_3), c2_3_3*c3_2_3 - c1_3_3*c2_1_3 - c3_3_3*(c2_2_3 - c3_1_3)]; % degree = 3
	M(:, 3, 1) = [0, 2*c3_1_2*c3_3_1 - c1_3_1*c2_1_2 - c1_1_2*c2_3_1 - c1_1_2*(c1_1_2*c2_1_2 - c3_1_2^2) - c2_1_2*(c1_2_2*c2_2_2 - c3_2_2^2) - c3_1_2*(c1_1_2*c2_2_2 + c1_2_2*c2_1_2 - 2*c3_1_2*c3_2_2), 2*c3_1_2*c3_3_2 - c1_1_2*c2_3_2 - c1_1_3*c2_3_1 - c1_3_1*c2_1_3 - c1_3_2*c2_1_2 - c3_1_2*(c1_1_2*c2_2_3 + c1_1_3*c2_2_2 + c1_2_2*c2_1_3 + c1_2_3*c2_1_2 - 2*c3_1_2*c3_2_3 - 2*c3_1_3*c3_2_2) + 2*c3_1_3*c3_3_1 - c1_1_3*(c1_1_2*c2_1_2 - c3_1_2^2) - c2_1_3*(c1_2_2*c2_2_2 - c3_2_2^2) - c1_1_2*(c1_1_2*c2_1_3 + c1_1_3*c2_1_2 - 2*c3_1_2*c3_1_3) - c2_1_2*(c1_2_2*c2_2_3 + c1_2_3*c2_2_2 - 2*c3_2_2*c3_2_3) - c3_1_3*(c1_1_2*c2_2_2 + c1_2_2*c2_1_2 - 2*c3_1_2*c3_2_2), 2*c3_1_2*c3_3_3 - c1_1_2*c2_3_3 - c1_1_3*c2_3_2 - c1_3_2*c2_1_3 - c1_3_3*c2_1_2 - c3_1_3*(c1_1_2*c2_2_3 + c1_1_3*c2_2_2 + c1_2_2*c2_1_3 + c1_2_3*c2_1_2 - 2*c3_1_2*c3_2_3 - 2*c3_1_3*c3_2_2) + 2*c3_1_3*c3_3_2 - c1_1_2*(c1_1_3*c2_1_3 - c3_1_3^2) - c2_1_2*(c1_2_3*c2_2_3 - c3_2_3^2) - c1_1_3*(c1_1_2*c2_1_3 + c1_1_3*c2_1_2 - 2*c3_1_2*c3_1_3) - c2_1_3*(c1_2_2*c2_2_3 + c1_2_3*c2_2_2 - 2*c3_2_2*c3_2_3) - c3_1_2*(c1_1_3*c2_2_3 + c1_2_3*c2_1_3 - 2*c3_1_3*c3_2_3), 2*c3_1_3*c3_3_3 - c1_3_3*c2_1_3 - c1_1_3*c2_3_3 - c1_1_3*(c1_1_3*c2_1_3 - c3_1_3^2) - c2_1_3*(c1_2_3*c2_2_3 - c3_2_3^2) - c3_1_3*(c1_1_3*c2_2_3 + c1_2_3*c2_1_3 - 2*c3_1_3*c3_2_3)]; % degree = 3
	M(:, 3, 2) = [0, 2*c3_2_2*c3_3_1 - c1_3_1*c2_2_2 - c1_2_2*c2_3_1 - c1_2_2*(c1_1_2*c2_1_2 - c3_1_2^2) - c2_2_2*(c1_2_2*c2_2_2 - c3_2_2^2) - c3_2_2*(c1_1_2*c2_2_2 + c1_2_2*c2_1_2 - 2*c3_1_2*c3_2_2), 2*c3_2_2*c3_3_2 - c1_2_2*c2_3_2 - c1_2_3*c2_3_1 - c1_3_1*c2_2_3 - c1_3_2*c2_2_2 - c3_2_2*(c1_1_2*c2_2_3 + c1_1_3*c2_2_2 + c1_2_2*c2_1_3 + c1_2_3*c2_1_2 - 2*c3_1_2*c3_2_3 - 2*c3_1_3*c3_2_2) + 2*c3_2_3*c3_3_1 - c1_2_3*(c1_1_2*c2_1_2 - c3_1_2^2) - c2_2_3*(c1_2_2*c2_2_2 - c3_2_2^2) - c1_2_2*(c1_1_2*c2_1_3 + c1_1_3*c2_1_2 - 2*c3_1_2*c3_1_3) - c2_2_2*(c1_2_2*c2_2_3 + c1_2_3*c2_2_2 - 2*c3_2_2*c3_2_3) - c3_2_3*(c1_1_2*c2_2_2 + c1_2_2*c2_1_2 - 2*c3_1_2*c3_2_2), 2*c3_2_2*c3_3_3 - c1_2_2*c2_3_3 - c1_2_3*c2_3_2 - c1_3_2*c2_2_3 - c1_3_3*c2_2_2 - c3_2_3*(c1_1_2*c2_2_3 + c1_1_3*c2_2_2 + c1_2_2*c2_1_3 + c1_2_3*c2_1_2 - 2*c3_1_2*c3_2_3 - 2*c3_1_3*c3_2_2) + 2*c3_2_3*c3_3_2 - c1_2_2*(c1_1_3*c2_1_3 - c3_1_3^2) - c2_2_2*(c1_2_3*c2_2_3 - c3_2_3^2) - c1_2_3*(c1_1_2*c2_1_3 + c1_1_3*c2_1_2 - 2*c3_1_2*c3_1_3) - c2_2_3*(c1_2_2*c2_2_3 + c1_2_3*c2_2_2 - 2*c3_2_2*c3_2_3) - c3_2_2*(c1_1_3*c2_2_3 + c1_2_3*c2_1_3 - 2*c3_1_3*c3_2_3), 2*c3_2_3*c3_3_3 - c1_3_3*c2_2_3 - c1_2_3*c2_3_3 - c1_2_3*(c1_1_3*c2_1_3 - c3_1_3^2) - c2_2_3*(c1_2_3*c2_2_3 - c3_2_3^2) - c3_2_3*(c1_1_3*c2_2_3 + c1_2_3*c2_1_3 - 2*c3_1_3*c3_2_3)]; % degree = 3
	M(:, 3, 3) = [c3_3_1^2 - c1_3_1*(c1_1_2*c2_1_2 - c3_1_2^2) - c2_3_1*(c1_2_2*c2_2_2 - c3_2_2^2) - c3_3_1*(c1_1_2*c2_2_2 + c1_2_2*c2_1_2 - 2*c3_1_2*c3_2_2) - c1_3_1*c2_3_1, 2*c3_3_1*c3_3_2 - c1_3_1*c2_3_2 - c1_3_2*c2_3_1 - c3_3_1*(c1_1_2*c2_2_3 + c1_1_3*c2_2_2 + c1_2_2*c2_1_3 + c1_2_3*c2_1_2 - 2*c3_1_2*c3_2_3 - 2*c3_1_3*c3_2_2) - c1_3_2*(c1_1_2*c2_1_2 - c3_1_2^2) - c2_3_2*(c1_2_2*c2_2_2 - c3_2_2^2) - c1_3_1*(c1_1_2*c2_1_3 + c1_1_3*c2_1_2 - 2*c3_1_2*c3_1_3) - c2_3_1*(c1_2_2*c2_2_3 + c1_2_3*c2_2_2 - 2*c3_2_2*c3_2_3) - c3_3_2*(c1_1_2*c2_2_2 + c1_2_2*c2_1_2 - 2*c3_1_2*c3_2_2), 2*c3_3_1*c3_3_3 - c1_3_1*c2_3_3 - c1_3_2*c2_3_2 - c1_3_3*c2_3_1 - c3_3_2*(c1_1_2*c2_2_3 + c1_1_3*c2_2_2 + c1_2_2*c2_1_3 + c1_2_3*c2_1_2 - 2*c3_1_2*c3_2_3 - 2*c3_1_3*c3_2_2) - c1_3_3*(c1_1_2*c2_1_2 - c3_1_2^2) - c1_3_1*(c1_1_3*c2_1_3 - c3_1_3^2) - c2_3_3*(c1_2_2*c2_2_2 - c3_2_2^2) - c2_3_1*(c1_2_3*c2_2_3 - c3_2_3^2) - c1_3_2*(c1_1_2*c2_1_3 + c1_1_3*c2_1_2 - 2*c3_1_2*c3_1_3) - c2_3_2*(c1_2_2*c2_2_3 + c1_2_3*c2_2_2 - 2*c3_2_2*c3_2_3) - c3_3_3*(c1_1_2*c2_2_2 + c1_2_2*c2_1_2 - 2*c3_1_2*c3_2_2) - c3_3_1*(c1_1_3*c2_2_3 + c1_2_3*c2_1_3 - 2*c3_1_3*c3_2_3) + c3_3_2^2, 2*c3_3_2*c3_3_3 - c1_3_2*c2_3_3 - c1_3_3*c2_3_2 - c3_3_3*(c1_1_2*c2_2_3 + c1_1_3*c2_2_2 + c1_2_2*c2_1_3 + c1_2_3*c2_1_2 - 2*c3_1_2*c3_2_3 - 2*c3_1_3*c3_2_2) - c1_3_2*(c1_1_3*c2_1_3 - c3_1_3^2) - c2_3_2*(c1_2_3*c2_2_3 - c3_2_3^2) - c1_3_3*(c1_1_2*c2_1_3 + c1_1_3*c2_1_2 - 2*c3_1_2*c3_1_3) - c2_3_3*(c1_2_2*c2_2_3 + c1_2_3*c2_2_2 - 2*c3_2_2*c3_2_3) - c3_3_2*(c1_1_3*c2_2_3 + c1_2_3*c2_1_3 - 2*c3_1_3*c3_2_3), c3_3_3^2 - c1_3_3*(c1_1_3*c2_1_3 - c3_1_3^2) - c2_3_3*(c1_2_3*c2_2_3 - c3_2_3^2) - c3_3_3*(c1_1_3*c2_2_3 + c1_2_3*c2_1_3 - 2*c3_1_3*c3_2_3) - c1_3_3*c2_3_3]; % degree = 4
